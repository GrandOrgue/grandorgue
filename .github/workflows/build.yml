name: Build

on: [push]

jobs:
  calc_ver:
    # calculate versions from git tags
    runs-on: ubuntu-latest
    outputs:
      project_ver: ${{steps.vers.outputs.project_ver}}
      build_ver: ${{steps.vers.outputs.build_ver}}
      full_ver: ${{steps.vers.outputs.full_ver}}
      release_flag: ${{steps.vers.outputs.release_flag}}
      release_id: ${{ steps.create_release.outputs.id }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Calculate versions
      id: vers
      shell: bash
      run: |
        git fetch --prune --unshallow --tags
        GIT_VERSION=`git describe --tags`
        PROJECT_VERSION=`echo $GIT_VERSION | cut -d- -f1`
        BUILD_VERSION=`echo $GIT_VERSION | cut -d- -f2-3 --output-delimiter=.`
        GIT_CHANGE_NUM=`echo $GIT_VERSION | cut -d- -f3`
        if [[ -n "$GIT_CHANGE_NUM" ]] || [[ "$BUILD_VERSION" < "1" ]]; then
          RELEASE_FLAG=OFF
        else
          RELEASE_FLAG=ON
        fi

        echo "::set-output name=project_ver::$PROJECT_VERSION"
        echo "::set-output name=build_ver::$BUILD_VERSION"
        echo "::set-output name=full_ver::$PROJECT_VERSION-$BUILD_VERSION"
        echo "::set-output name=release_flag::$RELEASE_FLAG"

    - name: Display versions
      run: |
        echo "project_ver=${{steps.vers.outputs.project_ver}}"
        echo "build_ver=${{steps.vers.outputs.build_ver}}"
        echo "full_ver=${{steps.vers.outputs.full_ver}}"
        echo "release_flag=${{steps.vers.outputs.release_flag}}"

    - name: Create Draft Release
      if: ${{ steps.vers.outputs.release_flag == 'ON' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.vers.outputs.full_ver }}"
        release_name:  "v${{ steps.vers.outputs.full_ver }}"
        draft: true
        prerelease: false
  
  build-linux:
    runs-on: ubuntu-16.04
    needs: [calc_ver]
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      run: ${{github.workspace}}/build-scripts/for-linux/prepare-debian-ubuntu.sh
      
    - name: Build
      working-directory: ${{github.workspace}}
      run: ${{github.workspace}}/build-scripts/for-linux/build-on-linux.sh ${{needs.calc_ver.outputs.project_ver}} ${{needs.calc_ver.outputs.build_ver}}

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: GrandOrgue-0.3.1.${{env.version_revision}}-linux.tar.gz
        path: ${{github.workspace}}/build-linux/GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-linux.tar.gz
        
    - name: Upload package to release
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.calc_ver.outputs.release_upload_url }}
        asset_path: ${{github.workspace}}/build-linux/GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-linux.tar.gz
        asset_name: GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-linux.tar.gz
        asset_content_type: text/plain

  build-osx:
    runs-on: macos-10.15
    needs: [calc_ver]
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      shell: bash
      run: ${{github.workspace}}/build-scripts/for-osx/prepare-osx.sh
      
    - name: Build
      working-directory: ${{github.workspace}}
      run: ${{github.workspace}}/build-scripts/for-osx/build-on-osx.sh ${{needs.calc_ver.outputs.project_ver}} ${{needs.calc_ver.outputs.build_ver}}

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: GrandOrgue-0.3.1.${{env.version_revision}}-osx.dmg
        path: ${{github.workspace}}/build-osx/GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-osx.dmg

    - name: Upload package to release
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.calc_ver.outputs.release_upload_url }}
        asset_path: ${{github.workspace}}/build-osx/GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-osx.dmg
        asset_name: GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-osx.dmg
        asset_content_type: text/plain
        
  build-win64:
    runs-on: ubuntu-latest
    needs: [calc_ver]
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      run: ${{github.workspace}}/build-scripts/for-win64/prepare-ubuntu-20.sh

    - name: Build
      working-directory: ${{github.workspace}}
      run: ${{github.workspace}}/build-scripts/for-win64/build-on-linux.sh ${{needs.calc_ver.outputs.project_ver}} ${{needs.calc_ver.outputs.build_ver}}

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: GrandOrgue-0.3.1.${{env.version_revision}}-win64.exe
        path: ${{github.workspace}}/build-win64/GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-win64.exe

    - name: Upload package to release
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.calc_ver.outputs.release_upload_url }}
        asset_path: ${{github.workspace}}/build-win64/GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-win64.exe
        asset_name: GrandOrgue-${{needs.calc_ver.outputs.full_ver}}-win64.exe
        asset_content_type: text/plain

  release:
    needs: [calc_ver, build_linux, build_osx, build_win64]
    if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
    runs-on: ubuntu-latest
    steps:
      
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.calc_ver.outputs.release_id }}
